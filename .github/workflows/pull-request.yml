name: Pull Request Checks

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

env:
  NODE_VERSION: '22.14.0'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npm run type-check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    env:
      BASE_URL: ${{ secrets.BASE_URL }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: success()
        with:
          files: ./coverage/lcov.info
          flags: e2e
          name: codecov-umbrella
          fail_ci_if_error: false

  status-comment:
    name: Status Comment
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, e2e-tests]
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Generate status summary
        id: status
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "status=✅ All checks passed successfully!" >> $GITHUB_OUTPUT
            echo "color=green" >> $GITHUB_OUTPUT
          else
            echo "status=❌ Some checks failed. Please review the logs." >> $GITHUB_OUTPUT
            echo "color=red" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 🚀 Pull Request Status')
            );
            
            const statusBody = `## 🚀 Pull Request Status
            
            ${process.env.STATUS}
            
            ### 📊 Test Results
            - **Linting**: ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - **Unit Tests**: ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - **E2E Tests**: ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}
            
            ### 📈 Coverage
            - Unit tests coverage is collected and uploaded to Codecov
            - E2E test results are available as artifacts
            
            ---
            *This comment was automatically generated by GitHub Actions*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: statusBody
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: statusBody
              });
            }
        env:
          STATUS: ${{ steps.status.outputs.status }}
