/**
 * This file contains shared types for the application, including Data Transfer Objects (DTOs)
 * and Command Models used in API requests and responses. These types are derived from the
 * database schema to ensure consistency between the frontend, backend, and database layers.
 *
 * Guideline:
 * - DTOs (Data Transfer Objects) are used for sending data in API responses.
 * - Command Models are used for receiving data in API requests (e.g., in the body of POST/PUT requests).
 *
 * We use TypeScript's utility types (Pick, Omit, Partial, etc.) to create these types
 * from the base table types generated by Supabase (`database.types.ts`). This practice
 * helps in maintaining type safety and reduces code duplication.
 */
import type { Tables, Enums } from "./db/database.types";

// #region Base Entity Types
// These types are direct references to the database table rows, serving as the
// single source of truth for our data models.

/** Represents a user's profile information. */
export type Profile = Tables<"profiles">;

/** Represents an AI-generated recipe. */
export type Recipe = Tables<"recipes">;

/** Represents a user's rating for a recipe. */
export type Rating = Tables<"ratings">;

/** Represents a saved recipe (user favorite). */
export type SavedRecipe = Tables<"saved_recipes">;

/** Represents a log entry for an AI generation event. */
export type AiUsage = Tables<"ai_usage">;

/** Represents the possible values for a recipe rating. */
export type RatingType = 1 | -1;

// #endregion

// #region Profile DTOs and Commands

/**
 * DTO for the current user's profile information.
 * @see GET /api/profiles/me
 */
export type ProfileDto = Omit<Profile, "status_changed_at">;

/**
 * Command model for updating the current user's profile preferences.
 * @see PUT /api/profiles/me
 */
export type UpdateProfileCommand = Pick<Profile, "preferences">;

/**
 * DTO for the response after updating a user's profile.
 * Contains a subset of the full profile data.
 * @see PUT /api/profiles/me
 */
export type UpdatedProfileDto = Pick<Profile, "user_id" | "preferences" | "status" | "updated_at">;

/**
 * DTO for the response after marking a user's profile for deletion.
 * @see DELETE /api/profiles/me
 */
export interface DeletedProfileDto {
  message: string;
  status: Profile["status"];
  deletion_scheduled_at: string; // ISO date string
}

// #endregion

// #region Recipe DTOs and Commands

/**
 * Command model for generating a new recipe.
 * @see POST /api/recipes/generate
 */
export interface GenerateRecipeCommand {
  query: string;
  model?: AiUsage["model"];
}

/**
 * DTO for the AI generation metadata included in recipe responses.
 * This is a subset of the `ai_generations_log` table.
 */
export type AiGenerationDto = Pick<AiUsage, "model" | "input_tokens" | "output_tokens" | "cost">;

/**
 * DTO for a newly generated recipe.
 * Combines recipe data with AI generation metrics and user preferences applied.
 * @see POST /api/recipes/generate
 */
export type GeneratedRecipeDto = Pick<
  Recipe,
  "id" | "title" | "is_visible" | "created_at"
> & {
  ingredients: string[];
  shopping_list: string[];
  instructions: string[];
  initial_user_query: string;
  user_preferences_applied: Profile["preferences"];
  ai_generation: AiGenerationDto;
};

/**
 * DTO for a detailed view of a single recipe.
 * Includes additional computed fields like `is_saved` and `user_rating`.
 * @see GET /api/recipes/{id}
 */
export type RecipeDetailsDto = Recipe & {
  /** Indicates if the user has saved this recipe (client-side state). */
  is_saved: boolean;
  /** The current user's rating for the recipe, if any. */
  user_rating: RatingType | null;
};

/**
 * DTO for a regenerated recipe.
 * Similar to `GeneratedRecipeDto` but includes a reference to the original recipe.
 * @see POST /api/recipes/{id}/regenerate
 */
export type RegeneratedRecipeDto = Pick<
  Recipe,
  | "id"
  | "title"
  | "is_visible"
  | "created_at"
> & {
  ingredients: string[];
  shopping_list: string[];
  instructions: string[];
  initial_user_query: string;
  regenerated_from_recipe_id: string;
  ai_generation: AiGenerationDto;
};

/**
 * Command model for updating a recipe's visibility.
 * @see PUT /api/recipes/{id}/visibility
 */
export type UpdateRecipeVisibilityCommand = Pick<Recipe, "is_visible">;

/**
 * DTO for the response after updating a recipe's visibility.
 * @see PUT /api/recipes/{id}/visibility
 */
export type UpdatedRecipeVisibilityDto = Pick<Recipe, "id" | "is_visible" | "updated_at">;

/**
 * DTO for a single recipe item in a list.
 * A lightweight version of the full recipe details.
 * @see GET /api/recipes
 */
export type RecipeListItemDto = Pick<Recipe, "id" | "title" | "created_at" | "is_visible"> & {
  user_rating: RatingType | null;
  is_saved: boolean;
};

/**
 * DTO for pagination metadata.
 */
export interface PaginationDto {
  page: number;
  limit: number;
  total: number;
  total_pages: number;
  has_next: boolean;
  has_previous: boolean;
}

/**
 * DTO for a paginated list of recipes.
 * @see GET /api/recipes
 */
export interface PaginatedRecipesDto {
  recipes: RecipeListItemDto[];
  pagination: PaginationDto;
}

// #endregion

// #region Rating DTOs and Commands

/**
 * Command model for creating or updating a recipe rating.
 * @see POST /api/recipes/{id}/rating
 * @see PUT /api/recipes/{id}/rating
 */
export type UpsertRatingCommand = Pick<Rating, "rating">;

/**
 * DTO for a created or updated recipe rating.
 * Includes a computed `can_regenerate` flag.
 * @see POST /api/recipes/{id}/rating
 * @see PUT /api/recipes/{id}/rating
 */
export type UpsertRatingDto = Rating & {
  /** Indicates if the user can regenerate the recipe based on this rating (e.g., after a 'down' vote). */
  can_regenerate: boolean;
};

/**
 * DTO for the response after deleting a rating.
 * @see DELETE /api/recipes/{id}/rating
 */
export interface DeletedRatingDto {
  message: string;
}

// #endregion

// #region AI Usage DTOs

/**
 * DTO for a breakdown of model usage within a period.
 */
export interface ModelUsageDto {
  generations: number;
  cost: number | null;
}

/**
 * DTO for a daily breakdown of AI generation statistics.
 */
export interface DailyUsageDto {
  date: string; // "YYYY-MM-DD"
  generations: number;
  cost: number | null;
}

/**
 * DTO for AI usage statistics over a specified period.
 * @see GET /api/ai/usage
 */
export interface AiUsageDto {
  period: "day" | "week" | "month" | "year" | "custom";
  start_date: string; // ISO date string
  end_date: string; // ISO date string
  total_generations: number;
  total_input_tokens: number;
  total_output_tokens: number;
  total_cost: number | null;
  models_used: Record<string, ModelUsageDto>;
  daily_breakdown: DailyUsageDto[];
}

// #endregion

// #region Authentication Types

/**
 * Represents the type of authentication form being displayed.
 */
export type AuthFormType = 'login' | 'register' | 'reset-password';

/**
 * Base authentication form data structure.
 */
export interface AuthFormData {
  email: string;
  password?: string;
  confirmPassword?: string;
  rememberMe?: boolean;
  acceptTerms?: boolean;
}

/**
 * Data structure for login form.
 */
export interface LoginFormData {
  email: string;
  password: string;
  rememberMe: boolean;
}

/**
 * Data structure for registration form.
 */
export interface RegisterFormData {
  email: string;
  password: string;
  confirmPassword: string;
  acceptTerms: boolean;
}

/**
 * Data structure for password reset form.
 */
export interface ResetPasswordFormData {
  email: string;
}

/**
 * Validation errors for authentication forms.
 */
export interface ValidationErrors {
  email?: string;
  password?: string;
  confirmPassword?: string;
  acceptTerms?: string;
  general?: string;
}

/**
 * Result of form validation.
 */
export interface ValidationResult {
  isValid: boolean;
  errors: ValidationErrors;
}

/**
 * Field validation state.
 */
export interface FieldValidation {
  value: string;
  isValid: boolean;
  error: string | null;
}

// #endregion

// #region Recipe List and Filtering Types

/**
 * Sort option for recipe lists.
 */
export interface SortOption {
  value: string;
  label: string;
  description: string;
}

/**
 * Filter option for recipe lists.
 */
export interface FilterOption {
  value: string;
  label: string;
  description: string;
}

/**
 * Sort types for recipes.
 */
export type SortType = 'created_at_desc' | 'created_at_asc' | 'title_asc' | 'title_desc' | 'rating_desc';

/**
 * Filter types for recipes.
 */
export type FilterType = 'all' | 'visible' | 'hidden' | 'rated' | 'unrated';

// #endregion
